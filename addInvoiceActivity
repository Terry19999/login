package com.example.registerandlogin;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.graphics.Bitmap;
import android.media.Image;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Base64;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;

public class AddInvoiceActivity extends AppCompatActivity {


    private Button btn_photo_upload, btn_issue;
    private EditText price, quantity, customer_name, mobile_number, address, sku, product_name,invoice_number, totalSale,textViewDate;
    private SimpleDateFormat sdFormat, sdFormat1;
    private Bitmap bitmap;
    private Uri filePath;
    private ProgressBar loading;
    ImageView receipt_image;
    private static String URL_INVOICE = "http://192.168.1.125/invoice.php";
    SessionManager sessionManager;
    Date current = new Date();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_invoice);

        sdFormat1 = new SimpleDateFormat("yyyyMMddHHmmSS");
        sdFormat1.setTimeZone(TimeZone.getTimeZone("GMT+8"));
        sdFormat = new SimpleDateFormat("yyyy-MM-dd");
        sdFormat.setTimeZone(TimeZone.getTimeZone("GMT+8"));
        Date current = new Date();

        price = findViewById(R.id.price);
        quantity = findViewById(R.id.quantity);
        totalSale = findViewById(R.id.totalSale);
        btn_photo_upload = findViewById(R.id.btn_photo);
        textViewDate = findViewById(R.id.Date);
        textViewDate.setText(sdFormat.format(current));
        receipt_image = findViewById(R.id.receipt_image);
        invoice_number = findViewById(R.id.invoice_number);
        invoice_number.setText(sdFormat1.format(current));
        customer_name = findViewById(R.id.customer_name);
        mobile_number = findViewById(R.id.mobileNumber);
        address = findViewById(R.id.address);
        sku = findViewById(R.id.sku);
        product_name = findViewById(R.id.productName);
        btn_issue = findViewById(R.id.btn_issue);
        loading = findViewById(R.id.loading);

        TextWatcher textWatcher = new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

                if (!price.getText().toString().equals("") && !quantity.getText().toString().equals("")) {
                    int number1 = Integer.parseInt(price.getText().toString());
                    int number2 = Integer.parseInt(quantity.getText().toString());
                    int sum = number1 * number2;
                    totalSale.setText(String.valueOf(sum));
                }
            }
            @Override
            public void afterTextChanged(Editable s) {

            }
        };
        price.addTextChangedListener(textWatcher);
        quantity.addTextChangedListener(textWatcher);

        btn_photo_upload.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                chosefile();
            }
        });

        btn_issue.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                issue_done();
            }
        });
    }



    private void chosefile(){
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent, "Select Picture"), 1);

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 1 & resultCode == RESULT_OK && data != null && data.getData() != null) {
            filePath = data.getData();

            try {

                bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), filePath);
                receipt_image.setImageBitmap(bitmap);


            } catch (IOException e) {
                e.printStackTrace();
            }


        }
    }

    private void issue_done() {
        loading.setVisibility(View.VISIBLE);
        btn_issue.setVisibility(View.GONE);

        final String date = this.textViewDate.getText().toString().trim();
        final String invoice_number = this.invoice_number.getText().toString().trim();
        final String customer_name = this.customer_name.getText().toString().trim();
        final String mobile_number = this.mobile_number.getText().toString().trim();
        final String address = this.address.getText().toString().trim();
        final String sku = this.sku.getText().toString().trim();
        final String product_name = this.product_name.getText().toString().trim();
        final String price = this.price.getText().toString().trim();
        final String quantity = this.quantity.getText().toString().trim();
        final String total_sales = this.totalSale.getText().toString().trim();
        final String receipt_image = this.getStringImage(bitmap);

        if (invoice_number.equals("") || customer_name.equals("") || mobile_number.equals("") || address.equals("") || sku.equals("") || product_name.equals("") || price.equals("") ||
                quantity.equals("") || total_sales.equals("")) {
            Toast.makeText(AddInvoiceActivity.this, "Do not leave any field empty.", Toast.LENGTH_SHORT).show();
            loading.setVisibility(View.GONE);
            btn_issue.setVisibility(View.VISIBLE);
        } else {
            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL_INVOICE,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String response) {

                            try {
                                JSONObject jsonObject = new JSONObject(response);
                                String success = jsonObject.getString("success");
                                if (success.equals("1")) {

                                    Toast.makeText(AddInvoiceActivity.this, "ISSUE DONE", Toast.LENGTH_SHORT).show();
                                    startActivity(new Intent(AddInvoiceActivity.this, HomeActivity.class));

                                }

                            } catch (JSONException e) {
                                e.printStackTrace();
                                Toast.makeText(AddInvoiceActivity.this, "Error!" + e.toString(), Toast.LENGTH_SHORT).show();
                                loading.setVisibility(View.GONE);
                                btn_issue.setVisibility(View.VISIBLE);
                            }
                        }

                    },

                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            Toast.makeText(AddInvoiceActivity.this, "Error!" + error.toString(), Toast.LENGTH_SHORT).show();
                            loading.setVisibility(View.GONE);
                            btn_issue.setVisibility(View.VISIBLE);
                        }
                    }) {
                @Override
                protected Map<String, String> getParams() throws AuthFailureError {
                    Map<String, String> params = new HashMap<>();
                    params.put("date", date);
                    params.put("invoice_number", invoice_number);
                    params.put("customer_name", customer_name);
                    params.put("mobile_number", mobile_number);
                    params.put("address", address);
                    params.put("sku", sku);
                    params.put("product_name", product_name);
                    params.put("price", price);
                    params.put("quantity", quantity);
                    params.put("total_sale", total_sales);
                    if (receipt_image != null) {
                        params.put("receipt_image", receipt_image);
                    }
                    else{
                        params.put("receipt_image", "");
                    }
                    return params;
                }
            };
            RequestQueue requestQueue = Volley.newRequestQueue(this);
            requestQueue.add(stringRequest);
        }
    }




    public String getStringImage(Bitmap bitmap) {

        if(bitmap != null ) {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);

            byte[] imageByteArray = byteArrayOutputStream.toByteArray();
            String encodedImage = Base64.encodeToString(imageByteArray, Base64.DEFAULT);


            return encodedImage;
        }else{
            return null;
        }

    }

}
