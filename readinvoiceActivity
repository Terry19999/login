package com.example.registerandlogin;

import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.squareup.picasso.MemoryPolicy;
import com.squareup.picasso.NetworkPolicy;
import com.squareup.picasso.Picasso;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;

public class ReadInvoiceActivity extends AppCompatActivity {


    private Button btn_search,btn_photo_upload,btn_edit,btn_done;
    private EditText price, quantity, customer_name, mobile_number, address, sku, product_name,invoice_number, totalSale,textViewDate;
    private SimpleDateFormat sdFormat;
    private Bitmap bitmap;
    private Uri filePath;
    private static String URL_READINVOICE = "http://192.168.1.125/readinvoice.php";
    ImageView receipt_image;
    String getid;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_read_invoice);


        btn_search = findViewById(R.id.btn_search);
        price = findViewById(R.id.price);
        quantity = findViewById(R.id.quantity);
        totalSale = findViewById(R.id.totalSale);
        btn_photo_upload = findViewById(R.id.btn_photo);
        textViewDate = findViewById(R.id.Date);
        receipt_image = findViewById(R.id.receipt_image);
        invoice_number = findViewById(R.id.invoice_number);
        customer_name = findViewById(R.id.customer_name);
        mobile_number = findViewById(R.id.mobileNumber);
        address = findViewById(R.id.address);
        sku = findViewById(R.id.sku);
        product_name = findViewById(R.id.productName);
        btn_edit = findViewById(R.id.btn_edit);
        btn_done = findViewById(R.id.btn_done);
        btn_edit.setVisibility(View.INVISIBLE);
        btn_done.setVisibility(View.INVISIBLE);
        textViewDate.setFocusable(false);
        invoice_number.setFocusable(false);
        customer_name.setFocusable(false);
        address.setFocusable(false);
        sku.setFocusable(false);
        product_name.setFocusable(false);
        price.setFocusable(false);
        quantity.setFocusable(false);
        totalSale.setFocusable(false);



        btn_search.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String mMobileNumber = mobile_number.getText().toString().trim();


                if (!mMobileNumber.isEmpty()) {
                    Search(mMobileNumber);
                } else {
                    mobile_number.setError("!!!");
                    Toast.makeText(ReadInvoiceActivity.this, "Please insert mobile number for searching", Toast.LENGTH_SHORT).show();

                }


            }
        });

        btn_edit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                customer_name.setFocusable(true);
                address.setFocusable(true);
                sku.setFocusable(true);
                product_name.setFocusable(true);
                price.setFocusable(true);
                quantity.setFocusable(true);
                totalSale.setFocusable(true);

                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(customer_name, InputMethodManager.SHOW_IMPLICIT);

                btn_edit.setVisibility(View.INVISIBLE);
                btn_done.setVisibility(View.VISIBLE);



            }
        });

    }
/*    private void SaveEditDetail() {

        final String customer_name = this.customer_name.getText().toString().trim();
        final String address = this.address.getText().toString().trim();
        final String sku = this.sku.getText().toString().trim();
        final String product_name = this.product_name.getText().toString().trim();
        final String price = this.price.getText().toString().trim();
        final String quantity = this.quantity.getText().toString().trim();
        final String totalSale = this.totalSale.getText().toString().trim();
        //final String photo = this.photo.getText().toString().trim();
        final String id = getid;

        final ProgressDialog progressDialog = new ProgressDialog(this);
        progressDialog.setMessage("Saving...");
        progressDialog.show();


        StringRequest stringRequest = new StringRequest(Request.Method.POST, URL_EDIT,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        progressDialog.dismiss();

                        try {
                            JSONObject jsonObject = new JSONObject(response);
                            String success = jsonObject.getString("success");

                            if(success.equals("1")){
                                Toast.makeText(ReadInvoiceActivity.this, "Success!", Toast.LENGTH_SHORT).show();
                                sessionManager.createSession(name, email, id);

                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                            progressDialog.dismiss();
                            Toast.makeText(ReadInvoiceActivity.this, "Error" +e.toString(), Toast.LENGTH_SHORT).show();
                        }

                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        progressDialog.dismiss();
                        Toast.makeText(ReadInvoiceActivity.this, "Error" +error.toString(), Toast.LENGTH_SHORT).show();

                    }
                })
        {
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("customer_name", customer_name);
                params.put("address", address);
                params.put("sku", sku);
                params.put("product_name", product_name);
                params.put("price", price);
                params.put("quantity", quantity);
                params.put("totalSale", totalSale);
                params.put("id", id);

                return params;

            }
        };

        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);

    }*/


        private void Search(final String mobile_number) {




            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL_READINVOICE,
                    new Response.Listener<String>() {


                        @Override
                        public void onResponse(String response) {
                            try{
                                Log.e("Debug 33333","3333");
                                JSONObject jsonObject = new JSONObject(response);
                                String success = jsonObject.getString("success");
                                JSONArray jsonArray = jsonObject.getJSONArray("readInvoice");

                                if(success.equals("1")){
                                    Log.e("Debug 00000","000000");
                                    for(int i = 0; i < jsonArray.length(); i++){
                                        JSONObject object = jsonArray.getJSONObject(i);

                                        String strDate = object.getString("date").trim();
                                        String strInvoiceNumber = object.getString("invoiceNumber").trim();
                                        //Add this for fetch image from json
                                        String strCustomerName = object.getString("customerName").trim();
                                       // String strMobileNumber = object.getString("mobileNumber").trim();
                                        String strAddress = object.getString("address").trim();
                                        String strSku = object.getString("sku").trim();
                                        String strProductName = object.getString("productName").trim();
                                        String strPrice = object.getString("price").trim();
                                        String strQuantity = object.getString("quantity").trim();
                                        String strTotalSale = object.getString("totalSale").trim();
                                        String strReceipt = object.getString("receiptImage").trim();

                                        textViewDate.setText(strDate);
                                        invoice_number.setText(strInvoiceNumber);
                                        customer_name.setText(strCustomerName);

                                        address.setText(strAddress);
                                        sku.setText(strSku);
                                        product_name.setText(strProductName);
                                        price.setText(strPrice);
                                        quantity.setText(strQuantity);
                                        totalSale.setText(strTotalSale);
                                        if(strReceipt.equals("")){
                                            receipt_image.setImageResource(R.drawable.ic_upload_1);
                                        }else {
                                        Picasso.get().load(strReceipt).memoryPolicy(MemoryPolicy.NO_CACHE).networkPolicy(NetworkPolicy.NO_CACHE).into(receipt_image);}
                                        btn_search.setVisibility(View.VISIBLE);

                                        textViewDate.setFocusableInTouchMode(false);
                                        invoice_number.setFocusableInTouchMode(false);
                                        customer_name.setFocusableInTouchMode(false);
                                        address.setFocusableInTouchMode(false);
                                        sku.setFocusableInTouchMode(false);
                                        product_name.setFocusableInTouchMode(false);
                                        price.setFocusableInTouchMode(false);
                                        quantity.setFocusableInTouchMode(false);
                                        totalSale.setFocusableInTouchMode(false);
                                        textViewDate.setFocusable(false);
                                        invoice_number.setFocusable(false);
                                        customer_name.setFocusable(false);
                                        address.setFocusable(false);
                                        sku.setFocusable(false);
                                        product_name.setFocusable(false);
                                        price.setFocusable(false);
                                        quantity.setFocusable(false);
                                        totalSale.setFocusable(false);


                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                                btn_search.setVisibility(View.VISIBLE);
                                Log.e("Debug 2222","22222");
                                Toast.makeText(ReadInvoiceActivity.this, "We don't have this mobile number", Toast.LENGTH_SHORT).show();
                            }
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {

                            btn_search.setVisibility(View.VISIBLE);
                            Log.e("Debug 11111","11111");
                            Toast.makeText(ReadInvoiceActivity.this, "Error " +error.toString(), Toast.LENGTH_SHORT).show();

                        }
                    })
            {
                @Override
                protected Map<String, String> getParams() throws AuthFailureError {
                    Map<String, String> params = new HashMap<>();
                    params.put("mobileNumber", mobile_number);
                    Log.e("Debug 44444","44444");
                    return params;
                }
            };
            RequestQueue requestQueue = Volley.newRequestQueue(this);
            requestQueue.add(stringRequest);
        }

    }
